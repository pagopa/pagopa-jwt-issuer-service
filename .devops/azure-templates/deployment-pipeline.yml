# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker
# Deploy to Azure Kubernetes Service:
# - DEV
# - UAT -> PROD
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: DEV_DEPLOY
    displayName: "Deploy on DEV environment"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: UAT_PROD_DEPLOY
    displayName: "Deploy on UAT environment with PROD promotion"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: SKIP_BUILD
    displayName: "Check this flag to skip build and proceed to deploy a docker image previously built"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: FORCE_REPLACE_DOCKER_IMAGE
    displayName: "Force the existing docker image to be replaced (latest tag)"
    type: boolean
    default: False
    values:
      - False
      - True
  - name: NATIVE_COMPILATION
    displayName: "Boolean flag to use native compilation or JVM runtime for the output executable: activating this parameter native compilation will be used, jvm otherwise"
    type: boolean
    default: True
    values:
      - False
      - True
  - name: DOMAIN
    displayName: "Domain for which run deployment"
    type: string
    values:
      - ecommerce
      - pay-wallet
  - name: DOCKER_FILE_NAME
    displayName: "Docker file name to use during build"
    type: string
    values:
      - "Dockerfile.native"
      - "Dockerfile.jvm"
  - name: DOCKER_FILE_VERSION_SUFFIX
    displayName: "Docker file name suffix to be used during acr image push"
    type: string

# --- START Deploy DEV --- #
stages:
  - stage: "Build_for_DEV"
    displayName: "Build for DEV"
    condition: and(succeeded(), not(${{ parameters.SKIP_BUILD }}), eq(${{parameters.DEV_DEPLOY}}, true))
    jobs:
      - job: Build_docker
        displayName: Build docker with Build.SourceVersion as TAG
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(DEV_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
              DOCKERFILE: ${{ parameters.DOCKER_FILE_NAME }}
  - stage: "Deploy_for_DEV"
    displayName: "Deploy DEV"
    dependsOn: Build_for_DEV
    condition: or(succeeded(), ${{ parameters.SKIP_BUILD }}, eq(${{parameters.DEV_DEPLOY}}, true) )
    jobs:
      - deployment: "deploy"
        environment: "DEV"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: Bash@3
                  name: update_chart_version
                  displayName: "Setup helm microservice chart"
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: ./helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    ENV: "DEV"
                    KUBERNETES_SERVICE_CONN: $(DEV_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ${{ parameters.DOMAIN }}
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-dev.yaml"
                    GREEN_VERSION: $(Build.SourceVersion)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}
                    #for jvm build add --values option targeting containing overrides from native helm values, such as required resources etc
                    ${{ if eq(parameters['NATIVE_COMPILATION'], False) }}:
                      ARGUMENTS: --timeout 5m0s --values helm/valuesOverrides/overrides-jvm-dev.yaml --values helm/valuesOverrides/${{ parameters.DOMAIN }}/overrides-dev.yaml
                    ${{ else }}:
                      ARGUMENTS: --timeout 5m0s --values helm/valuesOverrides/${{ parameters.DOMAIN }}/overrides-dev.yaml
  - stage: "API_Test_DEV"
    displayName: 'Running API test on green app'
    dependsOn: Deploy_for_DEV
    pool:
      name: pagopa-dev-linux
    jobs:
      - job: newman_api_test
        steps:
          - template: ./api-tests.yml
            parameters:
              API_TEST_FILE: api-tests/jwt-token-issuer-service.postman-collection.json
              ENV_FILE: api-tests/${{ parameters.DOMAIN }}-dev.env.json
              TEST_FILE_PREFIX: "dev"
              USE_NEWMAN_DOCKER_IMAGE: true
  # --- END Deploy DEV --- #

  # --- START Deploy UAT --- #
  - stage: "Build_release_candidate"
    displayName: "Build release candidate"
    dependsOn: []
    jobs:
      - job: "build"
        displayName: "Build release candidate docker image"
        steps:
          - template: templates/docker-release/template.yaml@pagopaCommons
            parameters:
              CONTAINER_REGISTRY_SERVICE_CONN: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              CONTAINER_REGISTRY_FQDN: $(UAT_CONTAINER_NAMESPACE)
              DOCKER_IMAGE_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
              DOCKER_IMAGE_TAG: $(Build.SourceVersion)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}-soak
              FORCE_REPLACE_DOCKER_IMAGE: ${{ parameters.FORCE_REPLACE_DOCKER_IMAGE }}
              DOCKERFILE: ${{ parameters.DOCKER_FILE_NAME }}
  - stage: "Get_Release_Version"
    displayName: "Get the app version to deploy"
    dependsOn: Build_release_candidate
    condition: in(dependencies.Build_release_candidate.result, 'Succeeded', 'Skipped')
    jobs:
      - job: "get_version"
        steps:
          - template: ./chart-current-version.yml
  - stage: "Tag_Docker_Release"
    displayName: "Tag Docker image to be release"
    dependsOn: Get_Release_Version
    condition: and(
      succeeded(),
      eq(${{parameters.SKIP_BUILD}}, false)
      )
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - job: "build"
        displayName: "Build UAT service beta"
        steps:
          - task: Docker@2
            displayName: "docker login"
            inputs:
              containerRegistry: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
              command: "login"
          - task: Bash@3
            displayName: "docker tag new version"
            inputs:
              targetType: "inline"
              script: |
                docker pull $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}-soak
                docker tag $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(Build.SourceVersion)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }} $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}-soak
                docker push $(UAT_CONTAINER_NAMESPACE)/$(K8S_IMAGE_REPOSITORY_NAME):$(app_version)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}-soak

  - stage: "Deploy_UAT_Green"
    displayName: "UAT green deployment"
    dependsOn: [Get_Release_Version, Tag_Docker_Release]
    variables:
      app_version: $[ stageDependencies.Get_Release_Version.get_version.outputs['chart_current_version.appVersion'] ]
    jobs:
      - deployment: "Green_deployment"
        displayName: "Green deployment"
        pool:
          name: pagopa-uat-linux
        environment: "UAT"
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout"
                - task: KubectlInstaller@0
                - task: Bash@3
                  name: update_chart_version
                  displayName: "Setup helm microservice chart"
                  inputs:
                    targetType: "inline"
                    script: |
                      helm repo add microservice-chart https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build helm
                - template: ./helm-microservice-chart-deploy.yml
                  parameters:
                    DO_DEPLOY: true
                    DO_BLUE_GREEN_DEPLOY: false
                    ENV: "UAT"
                    KUBERNETES_SERVICE_CONN: $(UAT_KUBERNETES_SERVICE_CONN)
                    NAMESPACE: ${{ parameters.DOMAIN }}
                    APP_NAME: $(K8S_IMAGE_REPOSITORY_NAME)
                    VALUE_FILE: "helm/values-uat.yaml"
                    GREEN_VERSION: $(app_version)${{ parameters.DOCKER_FILE_VERSION_SUFFIX }}-soak
                    #for jvm build add --values option targeting containing overrides from native helm values, such as required resources etc
                    ${{ if eq(parameters['NATIVE_COMPILATION'], False) }}:
                      ARGUMENTS: --timeout 5m0s --values helm/valuesOverrides/overrides-jvm-uat.yaml --values helm/valuesOverrides/${{ parameters.DOMAIN }}/overrides-uat.yaml
                    ${{ else }}:
                      ARGUMENTS: --timeout 5m0s --values helm/valuesOverrides/${{ parameters.DOMAIN }}/overrides-uat.yaml


  # --- END Deploy UAT --- #